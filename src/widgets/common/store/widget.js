/**
 * 该文件开源版本中 暂未开放源码，但可以免费无限制使用。
 * 【仅此1个文件是未开源的，接口见 widget.d.ts 】
 *
 * 如果需要完整代码，可以访问了解更多：http://mall.marsgis.cn/#/product/mars3d-react-project-jcxm
 *
 * 编译日期：2022-5-22
 * 版权所有：Copyright by 火星科技  http://mars3d.cn
 */
const __defProp = Object.defineProperty; const __defProps = Object.defineProperties; const __getOwnPropDescs = Object.getOwnPropertyDescriptors; const __getOwnPropSymbols = Object.getOwnPropertySymbols; const __hasOwnProp = Object.prototype.hasOwnProperty; const __propIsEnum = Object.prototype.propertyIsEnumerable; const __defNormalProp = (e, t, r) => t in e ? __defProp(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r; const __spreadValues = (e, t) => { for (var r in t || (t = {})) { __hasOwnProp.call(t, r) && __defNormalProp(e, r, t[r]) } if (__getOwnPropSymbols) { for (var r of __getOwnPropSymbols(t)) { __propIsEnum.call(t, r) && __defNormalProp(e, r, t[r]) } } return e }; const __spreadProps = (e, t) => __defProps(e, __getOwnPropDescs(t)); !(function(e, t) { typeof exports === "object" && typeof module !== "undefined" ? t(exports, require("react"), require("uuid"), require("redux"), require("react-redux")) : typeof define === "function" && define.amd ? define(["exports", "react", "uuid", "redux", "react-redux"], t) : t((e = typeof globalThis !== "undefined" ? globalThis : e || self).widget = {}, e.require$$0, e.uuid, e.redux, e.reactRedux) }(this, function(e, t, r, a, s) { function i(e) { return e && typeof e === "object" && "default" in e ? e : { default: e } } const o = { exports: {} }; const d = {}; const n = i(t).default; const l = Symbol.for("react.element"); const p = Symbol.for("react.fragment"); const u = Object.prototype.hasOwnProperty; const _ = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner; const c = { key: !0, ref: !0, __self: !0, __source: !0 }; function f(e, t, r) { let a; const s = {}; let i = null; let o = null; for (a in void 0 !== r && (i = "" + r), void 0 !== t.key && (i = "" + t.key), void 0 !== t.ref && (o = t.ref), t) { u.call(t, a) && !c.hasOwnProperty(a) && (s[a] = t[a]) } if (e && e.defaultProps) { for (a in t = e.defaultProps) { void 0 === s[a] && (s[a] = t[a]) } } return { $$typeof: l, type: e, key: i, ref: o, props: s, _owner: _.current } }d.Fragment = p, d.jsx = f, d.jsxs = f, o.exports = d; const g = o.exports.jsx; const b = o.exports.jsxs; const w = o.exports.Fragment; const m = e => { let t = {}; return e.meta && e.meta.props && (t = __spreadValues(__spreadValues({}, t), e.meta.props)), e.data && e.data.props && (t = __spreadValues(__spreadValues({}, t), e.data.props)), t }; let y = null; const v = e => { y.dispatch({ type: "disable", widget: e }) }; const O = s.connect(e => ({ widgets: e.widgets }))(e => (console.log("数据更新"), g(w, { children: e.widgets.filter(e => e.visible).map(e => { const r = e.component; return g(t.Suspense, { fallback: g("div", {}), children: g(r, __spreadProps(__spreadValues({}, m(e)), { visible: e.visible, onClose: () => v(e.name), currentWidget: e })) }, e.key) }) }))); e.WidgetView = O, e.activate = (e, t = !0) => { y.dispatch({ type: "activate", widget: e, reload: t }) }, e.connectWidget = e => s.connect(e => ({ widgets: e.widgets }))(e), e.disable = v, e.disableAll = (e = !1) => { y.dispatch({ type: "disableAll", force: e }) }, e.generateWidgetView = e => { if (!e) { throw new Error("generateWidgetView参数不能为空") } const t = __spreadValues({ autoDisable: !0, disableOther: !1 }, e.defaultOption); const i = e.openAtStart || []; const o = e.widgets.map(e => __spreadProps(__spreadValues(__spreadValues({ visible: i.includes(e.name) }, t), e), { meta: __spreadValues(__spreadValues({}, t.meta), e.meta), key: r.v4() })); return y = a.createStore(function(e = { widgets: o }, t) { switch (t.type) { case "disable": { const r = e.widgets; let a = t.widget; return typeof a === "string" && (a = [a]), { widgets: r.map(e => (a.indexOf(e.name) !== -1 && (delete e.data, e.visible = !1), e)) } } case "activate": { const a = e.widgets; const { widget: s, reload: i } = t; const o = typeof s === "string" ? s : s.name; const d = a.find(e => e.name === o); return d ? { widgets: a.map(e => (e.name === o ? (e.visible && i && (e.key = r.v4()), typeof s === "object" && s !== null && s.data && (e.data = s.data), e.visible = !0) : (d.group && e.group === d.group && (e.visible = !1), Array.isArray(d.disableOther) && d.disableOther.includes(e.name) && (e.visible = !1), !0 === d.disableOther && !0 === e.autoDisable && (e.visible = !1)), e)) } : (console.log("widget不存在", s), e) } case "disableAll": { const { force: r } = t; return { widgets: e.widgets.map(e => (e.visible && (r || e.autoDisable) && (e.visible = !1), e)) } } case "update": { const { widget: r, data: a } = t; return { widgets: e.widgets.map(e => r.indexOf(e.name) !== -1 ? __spreadProps(__spreadValues({}, e), { data: a }) : e) } } default:return e } }), ({ children: e }) => b(s.Provider, { store: y, children: [g(O, {}), e] }) }, e.isActive = e => { const t = (y.getState().widgets || []).find(t => t.name === e); return t && t.visible }, e.updateWidget = (e, t) => { y.dispatch({ type: "update", widget: e, data: t }) }, Object.defineProperties(e, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } }) }))
